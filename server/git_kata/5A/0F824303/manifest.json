{"id":"5A0F824303","created":[2016,11,23,8,34,28],"image_name":"cyberdojofoundation/python_behave","display_name":"Python, behave","filename_extension":".py","progress_regexs":[],"highlight_filenames":[],"lowlight_filenames":["cyber-dojo.sh","makefile","Makefile","unity.license.txt"],"red_amber_green":["lambda { |output|","  return :red   if /Failing scenarios/.match(output)","  return :green if /, 0 failed, /.match(output)","  return :amber","}"],"language":"Python-behave","tab_size":4,"visible_files":{"hiker.feature":"\nFeature: hitch-hiker playing scrabble\n\nScenario: last earthling playing scrabble in the past\nGiven the hitch-hiker selects some tiles\nWhen they spell 6 times 9\nThen the score is 42\n","hiker_steps.py":"from behave import *\nfrom hiker import Hiker\n\n@given(u'the hitch-hiker selects some tiles')\ndef step_impl(context):\n    pass\n\n@when(u'they spell {tile1:d} times {tile2:d}')\ndef step_impl(context, tile1, tile2):\n    douglas = Hiker()\n    context.tileproduct = douglas.answer(tile1, tile2);\n\n@then(u'the score is {answer:d}')\ndef step_impl(context, answer):\n    assert context.tileproduct is answer\n","hiker.py":"\nclass Hiker:\n\n    def answer(self, first, second):\n        return first * second\n","README":"Behave *requires* a /steps directory from which to load the steps.\n\ncyber-dojo does not currently support subdirectories as part of the\nlanguage/test/exercise setup.\n\nTo get around that, the cyber-dojo.sh file which runs the contents of\nyour project creates a temporary /steps folder and copies *_steps.py\nto it before running behave, then removes the folder and its contents.\n\nIMPORTANT: If you add a new steps file, be sure to name it *_steps.py\nso that it will be copied into the temporary steps directory and\navailable to your project.\n","cyber-dojo.sh":"mkdir steps\ncp *_steps.py steps\n\nbehave\n\nrm -rf steps\n","output":"","instructions":"Reversi is a board game for two players. The board contains\n8x8 squares. The players place Black or White counters onto\nthe board, one counter per square. More information can be\nfound on Wikipedia en.wikipedia.org/wiki/Reversi?. Your task\nis to write a program that takes a current board position\ntogether with information about whose turn it is, and returns\na list of the legal moves for that player. A move is only\nlegal if it results in at least one of the opponent's\ncounters being flipped.\n\nExample input: (the final B indicates it is Black's turn)\n........\n........\n........\n...BW...\n...WB...\n........\n........\n........\nB\n\nExample output: (each zero indicates a legal move for Black)\n........\n........\n....0...\n...BW0..\n..0WB...\n...0....\n........\n........\nB\n"},"exercise":"Reversi"}